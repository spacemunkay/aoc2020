{:ok, sessionkey} = File.read("input/jason")
#IO.inspect sessionkey

url = "https://adventofcode.com/2020/day/11/input"
Application.ensure_all_started(:inets)
Application.ensure_all_started(:ssl)

{:ok, {{'HTTP/1.1', 200, 'OK'}, _headers, body}} =
  :httpc.request(:get, {url, [{'Cookie', to_charlist("session="<>sessionkey)}]}, [], [])

#sample = 'LLLLLLLLLL.LLLL.LLLLLLL.LLLLLLL..LLLLLLLLLLLLLLL.LLLLLLLLLLLLLLLLLLL.LLLLLLLLLLLLLL.LL.LLLLLLL'
#sample = 'LLLLLLLLLL.LLLL.LLLLLLL.LLLLLLL..'#LLLLLLLLLLLLLLL.LLLLLLLLLLLLLLLLLLL.LLLLLLLLLLLLLL.LL.LLLLLLL'
sample = 'L.LL.LL.LL
LLLLLLL.LL
L.L.L..L..
LLLL.LL.LL
L.LL.LL.LL
L.LLLLL.LL
..L.L.....
LLLLLLLLLL
L.LLLLLL.L
L.LLLLL.LL'
room_string = List.to_string(body)

lines = String.split(room_string, "\n", trim: true)
first_line = List.first(lines)
defmodule Room do
  # y row, x col
  def hash_map(room_string) do
    lines = String.split(room_string, "\n", trim: true)
    rows = Enum.with_index(lines)
    Enum.reduce(rows, %{}, fn({row, y_idx}, map_acc) ->
      cols = String.split(row,"", trim: true) |> Enum.with_index
      x_map = Enum.reduce(cols, %{}, fn({spot, x_idx}, x_map_acc) ->
        Map.put(x_map_acc, x_idx, spot)
      end)
      Map.put(map_acc, y_idx, x_map)
    end)
  end

  def look(map, [x,y], xspot, yspot) do
    observed_spot = map |> Map.get(yspot+y, %{}) |> Map.get(xspot+x, nil)
    case observed_spot do
      "." -> look(map, [x,y], xspot+x, yspot+y)
      _ -> observed_spot
    end
  end

  def look_for_neighbors_for(map, xspot,yspot) do
    n_pos = [[-1, -1], [0, -1], [1, -1],
             [-1, 0]          , [1, 0],
             [-1, 1],  [0, 1],  [1, 1] ]
    n_pos |> Enum.map(fn([x,y]) ->
      look(map, [x,y], xspot, yspot)
    end)
  end

  def get_neighbors_for(map, xspot,yspot) do
    n_pos = [[-1, -1], [0, -1], [1, -1],
             [-1, 0]          , [1, 0],
             [-1, 1],  [0, 1],  [1, 1] ]
    n_pos |> Enum.map(fn([x,y]) ->
      map |> Map.get(yspot+y, %{}) |> Map.get(xspot+x, nil)
    end)
  end

  def occupied_neighbors_count(map, x, y) do
    Room.look_for_neighbors_for(map, x,y) |> Enum.filter(fn(s) -> s == "#" end) |> Enum.count
  end

  def update(map) do
    #IO.inspect(map)
    y_keys = Map.keys(map) |> Enum.sort()
    arr = Enum.map(y_keys, fn(y_idx) ->
      x_map = Map.get(map, y_idx)
      x_keys = Map.keys(x_map) |> Enum.sort()
      Enum.map(x_keys, fn(x_idx) ->
        spot = Map.get(x_map, x_idx)
        case spot do
          "L" -> if occupied_neighbors_count(map, x_idx, y_idx) == 0, do: "#", else: spot
          "#" -> if occupied_neighbors_count(map, x_idx, y_idx) >= 5, do: "L", else: spot
          #"." -> "."
          _ -> spot
        end
      end)
    end)
    #IO.inspect(arr)
    Enum.map(arr, fn(row) ->
      Enum.join(row, "")
    end) |> Enum.join("\n")
  end

  def run(initial_room_string) do
   #IO.puts("Step -------------------------")
   #IO.puts("-----------------------------------------------")
   #IO.puts("-----------------------------------------------")
   #IO.puts(initial_room_string)
    new_state = Room.update(Room.hash_map(initial_room_string))
    if new_state == initial_room_string do
      initial_room_string
    else
      Room.run(new_state)
    end
  end

 #def occupied_neighbors?(map, x, y) do
 #  Enum.member?(Room.get_neighbors_for(map, x,y),"#")
 #end

 #def crowded?(map, x, y) do
 #  Room.get_neighbors_for(map, x,y) |> Enum.filter(fn(s) -> s == "#")
 #end
end

final_state = Room.run(room_string)
#IO.puts room_string
#IO.puts("------------------------------------------------------")
#IO.puts("------------------------------------------------------")
#IO.puts("------------------------------------------------------")
#IO.puts("------------------------------------------------------")
#final_state = Room.update(Room.hash_map(room_string))
IO.puts final_state
#IO.puts String.length(final_state)
IO.inspect(Enum.frequencies(String.split(final_state, "", trim: true)))

IO.inspect(Room.look_for_neighbors_for(Room.hash_map(room_string), 0, 0))

#IO.inspect( Room.hash_map(room_string))
